import dotenv from 'dotenv';
import app from './app';
import prismaClient from './prisma/index';
import { TokenService } from './services/tokenService';

// Carregar vari√°veis de ambiente PRIMEIRO
dotenv.config();

const PORT = process.env.PORT || 3000;

// Fun√ß√£o para inicializar o servidor
const startServer = async () => {
  try {
    // Conectar ao banco de dados
    await prismaClient.$connect();
    console.log('‚úÖ Conectado ao banco de dados PostgreSQL');

    // Limpar tokens expirados na inicializa√ß√£o
    await TokenService.cleanupExpiredTokens();
    console.log('‚úÖ Tokens expirados removidos');

    // Iniciar servidor
    app.listen(PORT, () => {
      console.log(`üöÄ Servidor rodando na porta ${PORT}`);
      console.log(`üì± Ambiente: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üåê URL: http://localhost:${PORT}`);
      console.log(`üìä Health Check: http://localhost:${PORT}/health`);
      console.log(`üìö Swagger Docs: http://localhost:${PORT}/api-docs`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao iniciar o servidor:', error);
    process.exit(1);
  }
};

// Fun√ß√£o para encerrar o servidor graciosamente
const gracefulShutdown = async () => {
  console.log('\nüõë Encerrando servidor...');
  
  try {
    await prismaClient.$disconnect();
    console.log('‚úÖ Conex√£o com banco de dados encerrada');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro ao encerrar servidor:', error);
    process.exit(1);
  }
};

// Capturar sinais de encerramento
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// Capturar erros n√£o tratados
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// Iniciar servidor
startServer();